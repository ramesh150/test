package log4jwebtracker.servlet;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.ResultSet;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import log4jwebtracker.io.StreamUtils;
import log4jwebtracker.io.sql.LogDao;
//import log4jwebtracker.logging.LoggingUtils;
//import org.apache.logging.log4j.LogManager;
//import org.apache.logging.log4j.Logger;
//import org.apache.logging.log4j.core.appender.RollingFileAppender;
//import org.apache.logging.log4j.core.appender.rolling.*;
//import org.apache.logging.log4j.Level;



/**
 * Tracker servlet.
 *
 * @author Mariano Ruiz
 */
public class TrackerServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;
    private final String path_to_log="/home/rameshchandra/workspace/CaseStatus/log/";
    private final String file_type=".html";
	//private static final Logger logger = LogManager.getLogger(TrackerServlet.class);
	
	private static final int BUFFER_SIZE = 1024 * 16;

	private byte[] jqueryMin = null;
	private byte[] jqueryWordWrap = null;
	private byte[] jqueryui = null;
	private byte[] customjs = null;
	private byte[] bootstrapjs = null;
	
	private byte[] css_tracker = null;
	private byte[] css_jquery_ui = null;
	private byte[] css_bootstrap = null;
	private byte[] logo = null;

	protected void service(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		// Action URI, eg. /webtracker/tracker/config
		String action = request.getRequestURI();
		// Servlet URI, eg. /webtracker/tracker
		String baseAction = request.getContextPath() + request.getServletPath();
		if(request.getPathInfo()==null || request.getPathInfo().equals("") || request.getPathInfo().equals("/")) {
			response.sendRedirect(response.encodeRedirectURL(baseAction + "/log"));
		// If JS resource
		} else if(request.getPathInfo().startsWith("/js/")) {
			if(request.getPathInfo().equals("/js/jquery-1.6.4.min.js")) {
				doResource(request, response, getJQueryMin(), "application/javascript");
			} else if(request.getPathInfo().equals("/js/jquery.wordWrap.js")) {
				doResource(request, response, getJQueryWordWrap(), "application/javascript");
			}
			else if(request.getPathInfo().equals("/js/jquery-ui.min.js")) {
				doResource(request, response, getJqueryUI(), "application/javascript");
			} 
			else if(request.getPathInfo().equals("/js/custom.js")) {
				doResource(request, response, getCustomJS(), "application/javascript");
			}
			else if(request.getPathInfo().equals("/js/bootstrap.min.js")) {
				doResource(request, response, getBootstrapJs(), "application/javascript");
			} 
			else {
				
				response.sendError(HttpServletResponse.SC_NOT_FOUND);
			}
		// If CSS resource
		} else if(request.getPathInfo().startsWith("/css/")) {
			if(request.getPathInfo().equals("/css/bootstrap.min.css")) {
				doResource(request, response, getBootStrapCss(), "text/css");
			}else
			if(request.getPathInfo().equals("/css/jqueryui.css")) {
				doResource(request, response, getJUICss(), "text/css");
			}else
				if(request.getPathInfo().equals("/css/tracker.css")) {
				doResource(request, response, getTrackerCSS(), "text/css");
			} else {
				
				response.sendError(HttpServletResponse.SC_NOT_FOUND);
			}
		// If image resource
		} else if(request.getPathInfo().startsWith("/img/")) {
			if(request.getPathInfo().equals("/img/logo.png")) {
				doResource(request, response, getLogo(), "image/png");
			} else {
				
				response.sendError(HttpServletResponse.SC_NOT_FOUND);
			}
		// If log request
		} else if(request.getPathInfo().startsWith("/taillog")) {
			doTailLog(request, response, action, baseAction);
		// If ajax log request
		} else if(request.getPathInfo().startsWith("/getlog")) {
			doGetLog(request, response, action, baseAction);
		// Page resource
		} else {
			
			doPage(request, response, action, baseAction);
		}
		
	}

	private void doResource(
			HttpServletRequest request, HttpServletResponse response,
			byte[] buffer, String contentType)
					throws ServletException, IOException {
		ServletOutputStream output = response.getOutputStream();
		response.setContentType(contentType);
		response.setContentLength(buffer.length);
		output.write(buffer, 0, buffer.length);
		output.flush();
		output.close();
	}

	private void doPage(
			HttpServletRequest request, HttpServletResponse response,
			String action, String baseAction)
					throws ServletException, IOException {
		request.setAttribute("action", action);
		request.setAttribute("baseAction", baseAction);
		if(request.getPathInfo().equals("/log")) {
			doLog(request, response, action, baseAction);
		} else if(request.getPathInfo().equals("/config")) {
			doConfiguration(request, response, action, baseAction);
		} else {
			//logger.warn("Request page " + action + " not found.");
			response.sendError(HttpServletResponse.SC_NOT_FOUND);
		}
	}

	private void doConfiguration(
			HttpServletRequest request, HttpServletResponse response,
			String action, String baseAction)
					throws ServletException, IOException {
		//request.setAttribute("loggers", loggers);
		//Enumeration e = request.getParameterNames();
//		while(e.hasMoreElements()) {
//			String parameterName = (String) e.nextElement();
//
//		}
		doHTML(request, response);
	}

	private void doLog(
			HttpServletRequest request, HttpServletResponse response,
			String action, String baseAction)
					throws ServletException, IOException {
		
		doHTML(request, response);
	}

	private void doTailLog(HttpServletRequest request,
			HttpServletResponse response, String action, String baseAction)
					throws ServletException, IOException {
		  		StringBuilder sb_table=new StringBuilder();
				OutputStream output = response.getOutputStream();
				System.out.println(request.getParameter("from_date"));
				try {
					String contentType = "text/plain";
					response.setContentType(contentType);
					response.setHeader("Cache-Control", "no-cache"); // HTTP 1.1
					response.setHeader("Pragma", "no-cache");        // HTTP 1.0
					response.setDateHeader("Expires", -1);           // prevents caching
					sb_table.append("<table border='1' class='table table-responsive'");
					sb_table.append("<thead><tr>"
												+ "<th style='width:5%; font-size:14px;' class='t_h'>Date</th>"
												+ "<th style='width:5%;font-size:14px;' class='t_h'>Level</th>"
												+ "<th style='width:10%;font-size:14px;' class='t_h'>Host IP</th>"
												+ "<th style='width:15%;font-size:14px;' class='t_h'>Source</th>"
												+ "<th style='width:60%;font-size:14px;' class='t_h'>Message</th>"
												+ "<th style='width:12%;font-size:14px;' class='t_h'>User</th>"
									+ "</tr></thead>");
					sb_table.append("<tbody>");
					
					sb_table.append(LogDao.getAllLos(request.getParameter("date_from"),request.getParameter("date_to"),request.getParameter("level")).toString());
					sb_table.append("</tbody></table>");
					
				} catch(Exception e) {
					//logger.error("Error getting the file appender="+ fileAppender.getFile(), e);
					output.write("TrackerError: Check the log manually.".getBytes());
				}
				output.write(sb_table.toString().getBytes());
				output.flush();
				output.close();
	}
	private void doGetLog(HttpServletRequest request,
			HttpServletResponse response, String action, String baseAction)
					throws ServletException, IOException {
			//String appenderName = request.getParameter("appender");
			  String file_name=request.getParameter("file");
			  file_name=file_name.replace("+", " ");
			if(true) {
				File file = new File(path_to_log+file_name);
				System.out.println(path_to_log+file_name);
				OutputStream output = response.getOutputStream();
				try {
					String contentType = "text/plain";
					response.setContentType(contentType);
					response.setContentLength((int) file.length());
					response.setHeader("Cache-Control", "no-cache"); // HTTP 1.1
					response.setHeader("Pragma", "no-cache");        // HTTP 1.0
					response.setDateHeader("Expires", -1);           // prevents caching
					response.setHeader("Content-Disposition","attachment; filename=\""+file.getName() + "\"");
					InputStream fileStream = new FileInputStream(file);
					StreamUtils.readStream(fileStream, output, BUFFER_SIZE);
					fileStream.close();
				} catch(IOException e) {
					response.setHeader("Content-Disposition", "");
					//logger.error("Error getting the file appender="+ fileAppender.getFile(), e);
					output.write("TrackerError: Check the log manually.".getBytes());
					output.close();
				}
				output.flush();
				output.close();
			} 
		
	}
	public void doHTML(HttpServletRequest request, HttpServletResponse response)
			throws java.io.IOException, ServletException {

		ServletOutputStream out = response.getOutputStream();
		System.out.println("=====dohtml");
		response.setContentType("text/html; charset=UTF-8");
		StringBuilder sb=new StringBuilder();
		sb.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\"><html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /><meta http-equiv=\"Pragma\" content=\"no-cache\" /><meta http-equiv=\"Expires\" content=\"-1\" />"
				+ "<link rel=\"stylesheet\" type=\"text/css\" href=\"");
		sb.append((String) request.getAttribute("baseAction"));
		sb.append("/css/tracker.css\" />"
				+ "<link rel=\"stylesheet\" type=\"text/css\" href=\"");
		sb.append((String) request.getAttribute("baseAction"));
		sb.append("/css/jqueryui.css\" />"
				+ "<link rel=\"stylesheet\" type=\"text/css\" href=\"");
				sb.append((String) request.getAttribute("baseAction"));
				sb.append("/css/bootstrap.min.css\" />"
				
				
				+ "<script type=\"text/javascript\" src=\"");
				sb.append((String) request.getAttribute("baseAction"));
		sb.append("/js/jquery-1.6.4.min.js\"></script>"
				
				+ "<script type=\"text/javascript\" src=\"");
		sb.append((String) request.getAttribute("baseAction"));
		sb.append("/js/jquery.wordWrap.js\"></script>"
				+"<script type=\"text/javascript\" src=\""
				+(String) request.getAttribute("baseAction")
				+"/js/jquery-ui.min.js\"></script>"
				
				+"<script type=\"text/javascript\" src=\""
				+(String) request.getAttribute("baseAction")
				+"/js/bootstrap.min.js\"></script>"
				
				+"<script type=\"text/javascript\" src=\""
				+(String) request.getAttribute("baseAction")
				+"/js/custom.js\"></script>");
				
		
		sb.append("<!--[if !IE 7]><style type=\"text/css\">#wrap { display:table;height:100% }</style><![endif]--></head><body><div id=\"wrap\"><div id=\"header\"><h1><a href=\"");
		sb.append((String) request.getAttribute("baseAction"));
		sb.append("\"       title=\"Log4j Web Tracker\"       style=\"background: url('");
		sb.append((String) request.getAttribute("baseAction"));
		sb.append("/img/logo.png') no-repeat; display: block; height: 96px;\"></a></h1></div>"
				+ "<div id=\"navcontainer\">"
				+ "<ul id=\"navlist\"><li><a href='log' \"class=\"active\" ");
		sb.append(" >Log</a></li></ul></div><div class=\"clear\"></div><div class=\"container\" style='width:100%;' id=\"main\">");
		sb.append("<div id=\"log\"><div id=\"options\">");
		sb.append("<form action=\"");
		sb.append((String) request.getAttribute("baseAction"));
		sb.append("\" class='form-inline'>");
		sb.append("<div class='form-group'>");
		sb.append("<label for=\"Date-From\">From : </label>");
		sb.append("<input id='from_date' type='text' name='from_date' class='datepicker form-control' />");
		sb.append("</div>");
		sb.append("<div class='form-group'>");
		sb.append("<label for=\"Date-To\">To : </label>");
		sb.append("<input id='to_date' type='text' name='to_date' class='datepicker form-control' /></div>");
		sb.append("<div class='form-group'>"
				+ "<label for=\"Select Level\"> Level : </label>"
				+"<select name='level' id='level'>"
				+ "<option value='ALL'>ALl</option>"
				+ "<option value='INFO'>Info</option>"
				+ "<option value='ERROR'>Error</option>"
				+ "<option value='DEBUG'>Debug</option>"
				+ "<option value='TRACE'>Trace</option>"
				+ "<option value='FATAL'>Fatal</option>"
				+ "</select>"
				+ "</div>"
					+ "<button type=\"button\" class='btn btn-default' id=\"refresh\">Refresh</button>"
					+ "</form></div><div style=\"overflow: hidden;\">"
					+ "<div id=\"loading-mask\" style=\"display: none;\"></div></div>"
					+ "</div><div class=\"table-responsive\" id=\"logText\" rows=\"20\" spellcheck=\"false\"></div></div>");
		sb.append("</div></div><div id=\"footer\"><div id=\"back-link\"><span><a href=\"");
		sb.append(request.getContextPath());
		sb.append("/\">&uarr; Go to the application</a></span></div><div id=\"copyright\"><span>Copyright 2011-2014&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;<i>Power by&nbsp;&nbsp;</i><a href=\"http://www.log4jwebtracker.com\" target=\"_blank\">Log4j Web Tracker</a> v1.0.2</span></div></div></body></html>");
		out.print(sb.toString());
		System.out.println(sb.toString());
	}
	synchronized private byte[] getJQueryMin() throws IOException {
		if(jqueryMin==null) {
			InputStream in = this.getClass().getResourceAsStream("js/jquery-1.6.4.min.js");
			jqueryMin = toByteArray(in);
			in.close();
		}
		return jqueryMin;
	}

	synchronized private byte[] getJQueryWordWrap() throws IOException {
		if(jqueryWordWrap==null) {
			InputStream in = this.getClass().getResourceAsStream("js/jquery.wordWrap.js");
			jqueryWordWrap = toByteArray(in);
			in.close();
		}
		return jqueryWordWrap;
	}
	synchronized private byte[] getJqueryUI() throws IOException {
		if(jqueryui==null) {
			InputStream in = this.getClass().getResourceAsStream("js/jquery-ui.min.js");
			jqueryui = toByteArray(in);
			in.close();
		}
		return jqueryui;
	}
	synchronized private byte[] getCustomJS() throws IOException {
		if(customjs==null) {
			InputStream in = this.getClass().getResourceAsStream("js/custom.js");
			customjs = toByteArray(in);
			in.close();
		}
		return customjs;
	}
	synchronized private byte[] getTrackerCSS() throws IOException {
		if(css_tracker==null) {
			InputStream in = this.getClass().getResourceAsStream("css/tracker.css");
			css_tracker = toByteArray(in);
			in.close();
		}
		return css_tracker;
	}
	synchronized private byte[] getJUICss() throws IOException {
		if(css_jquery_ui==null) {
			InputStream in = this.getClass().getResourceAsStream("css/jqueryui.css");
			css_jquery_ui = toByteArray(in);
			in.close();
		}
		return css_jquery_ui;
	}
	synchronized private byte[] getBootStrapCss() throws IOException {
		if(css_bootstrap==null) {
			InputStream in = this.getClass().getResourceAsStream("css/bootstrap.min.css");
			css_bootstrap = toByteArray(in);
			in.close();
		}
		return css_bootstrap;
	}
	synchronized private byte[] getBootstrapJs() throws IOException {
		if(bootstrapjs==null) {
			InputStream in = this.getClass().getResourceAsStream("js/bootstrap.min.js");
			bootstrapjs = toByteArray(in);
			in.close();
		}
		return bootstrapjs;
	}

	synchronized private byte[] getLogo() throws IOException {
		if(logo==null) {
			InputStream in = this.getClass().getResourceAsStream("img/logo.png");
			logo = toByteArray(in);
			in.close();
		}
		return logo;
	}
	
	/**
     * Get the contents of an <code>InputStream</code> as a <code>byte[]</code>.
     * <p>
     * This method buffers the input internally, so there is no need to use a
     * <code>BufferedInputStream</code>.
     * 
     * @param input  the <code>InputStream</code> to read from
     * @return the requested byte array
     * @throws NullPointerException if the input is null
     * @throws IOException if an I/O error occurs
     */
    private byte[] toByteArray(InputStream input) throws IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        StreamUtils.readStream(input, output, BUFFER_SIZE);
        return output.toByteArray();
    }
}
