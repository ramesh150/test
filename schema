package com.scc.nonscc.main;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Deque;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.collections.map.MultiValueMap;

import org.apache.commons.lang.StringUtils;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.impl.HttpSolrClient;
import org.apache.commons.io.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import scc.tagger.TagResponse;
import scc.tagger.TagResponse.Tag;
import service.SolrService;
import service.SolrServiceImpl;
import com.google.common.base.Stopwatch;
public class StartMain {
	
	public static void main(String args[]) {
		Logger LOGGER = LoggerFactory.getLogger(StartMain.class);
		SolrClient client = new HttpSolrClient("http://192.168.1.244:8984/solr/CitationTagger");
		SolrService ss=new SolrServiceImpl();
		Boolean found=false;
		StringBuilder sb=new StringBuilder();
		Boolean citref=false;
		try (Stream<Path> walk = Files.walk(Paths.get("/home/rameshchandra/Documents/source_docs"))) {
			
			List<String> result = walk.map(x -> x.toString())
					.filter(f -> f.endsWith(".xml")).collect(Collectors.toList());
			String s_tag="<notfound>";
			String e_tag="</notfound>";
			System.out.println("************************** Scc-Matcher Begin ******************************");
			Stopwatch timer = Stopwatch.createStarted();
			for(String file:result){
				 File f=new File(file); EncodingHandler.changeEncoding(f);
				 	sb=new StringBuilder(FileUtils.readFileToString(f, "utf-8")); 
				 	sb=new StringBuilder(sb.toString().replace("&", "$@#$")); 
				 	sb=new StringBuilder(sb.toString().replace("$@#$amp;", "&amp;")); 
				 	sb=new StringBuilder(sb.toString().replace(s_tag, ""));
				 	sb=new StringBuilder(sb.toString().replace(e_tag, ""));
				 	
				 	TagResponse tr=ss.getTagResponse(sb,client);
					List<Tag> ts=tr.getTags();
				
				 LOGGER.info(sb.toString()); 
				  
				 	
				new AddTag().addNotFound(file,s_tag,e_tag,ts,sb);
			}
			
			System.out.println("************************** Scc-Matcher End ******************************");
			System.out.println("************************** Total time taken : "+timer.stop()+" ******************************");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
}
